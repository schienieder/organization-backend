# Generated by Django 3.1.5 on 2021-01-25 13:52

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_verified', models.BooleanField(default=False)),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('is_teacher', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('ip_address', models.GenericIPAddressField(unpack_ipv4=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='attendance_user_owner', to=settings.AUTH_USER_MODEL, verbose_name='Attendance Owner')),
            ],
        ),
        migrations.CreateModel(
            name='Badges',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_received', models.DateTimeField()),
                ('name', models.CharField(max_length=50)),
                ('condition', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Org',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Organization Name')),
                ('date_created', models.DateField()),
                ('description', models.CharField(max_length=50)),
                ('logo', models.CharField(max_length=50)),
                ('background_image', models.CharField(max_length=50)),
                ('verified', models.BooleanField(default=False)),
                ('readme', models.CharField(max_length=50, null=True)),
                ('contact_number', models.CharField(max_length=50)),
                ('email', models.CharField(max_length=50)),
                ('official', models.BooleanField(default=False)),
                ('password', models.CharField(max_length=50, verbose_name='Organization Password')),
                ('member_limit', models.IntegerField()),
                ('restricted', models.BooleanField(default=False)),
                ('disabled', models.BooleanField(default=False)),
                ('restriction_type', models.IntegerField()),
                ('members', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Organization Member')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='org_owner', to=settings.AUTH_USER_MODEL, verbose_name='Organization Owner')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentPlans',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_expiration', models.BooleanField(default=False)),
                ('expiration_date', models.DateField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('contract_lenght', models.IntegerField()),
                ('name', models.CharField(max_length=50)),
                ('features', models.JSONField()),
            ],
        ),
        migrations.CreateModel(
            name='Votes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_voted', models.DateTimeField()),
                ('validated', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(unpack_ipv4=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='votes_owner', to=settings.AUTH_USER_MODEL, verbose_name='VOTER')),
            ],
        ),
        migrations.CreateModel(
            name='UserOrg',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_restricted', models.BooleanField(default=True)),
                ('create_blocked', models.BooleanField(default=False)),
                ('org_max_count', models.IntegerField(default=1)),
                ('org', models.ManyToManyField(to='api.Org', verbose_name='User Created Organization')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_org_control', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_level', models.CharField(choices=[('1', 'First Year'), ('2', 'Second Year'), ('3', 'Third Year'), ('4', 'Fourth Year'), ('5', 'Fift Year'), ('0', 'Graduated')], max_length=1)),
                ('course', models.CharField(max_length=50, null=True)),
                ('section', models.CharField(max_length=20, null=True)),
                ('student_id', models.CharField(max_length=10, null=True)),
                ('date_of_birth', models.DateField()),
                ('age', models.IntegerField()),
                ('profile_image', models.CharField(max_length=250, null=True)),
                ('background_image', models.CharField(max_length=250, null=True)),
                ('read_me', models.CharField(max_length=250, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_info', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAuth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('one_time_code', models.CharField(max_length=6)),
                ('expiration', models.DurationField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_auth', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('date_replied', models.DateTimeField()),
                ('hearts', models.IntegerField()),
                ('reply_replies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reply_of_reply', to='api.reply')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reply_owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_only', models.BooleanField(default=False)),
                ('date_posted', models.DateTimeField()),
                ('content', models.TextField()),
                ('is_pinned', models.BooleanField(default=False)),
                ('hearts', models.IntegerField()),
                ('views', models.IntegerField()),
                ('is_private', models.BooleanField(default=False)),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_owner', to='api.org')),
                ('replies', models.ManyToManyField(to='api.Reply')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PollCandidate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=50)),
                ('partylist', models.CharField(max_length=50)),
                ('is_disqualified', models.BooleanField(default=False)),
                ('is_winner', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='poll_user_candidate', to=settings.AUTH_USER_MODEL, verbose_name='Candidate')),
                ('votes', models.ManyToManyField(to='api.Votes', verbose_name='Candidate Votes')),
            ],
        ),
        migrations.CreateModel(
            name='OrgApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField()),
                ('flagged', models.BooleanField(default=False)),
                ('is_accepted', models.BooleanField(default=False)),
                ('decline_reason', models.CharField(max_length=50)),
                ('date_accepted', models.DateField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_application', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='org',
            name='user_org_application',
            field=models.ManyToManyField(to='api.OrgApplication'),
        ),
        migrations.CreateModel(
            name='MainPoll',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=250)),
                ('date_created', models.DateTimeField()),
                ('is_open', models.BooleanField(default=False)),
                ('date_open', models.DateTimeField()),
                ('is_stopped', models.BooleanField(default=False)),
                ('date_close', models.DateTimeField()),
                ('finished', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('notes', models.CharField(max_length=100)),
                ('conditions', models.JSONField()),
                ('candidates', models.ManyToManyField(to='api.PollCandidate')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='org_poll_owner', to='api.org', verbose_name='Poll Location')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='poll_creator', to=settings.AUTH_USER_MODEL, verbose_name='Who created the poll')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('ended', models.BooleanField(default=False)),
                ('canceled', models.BooleanField(default=False)),
                ('started', models.BooleanField(default=False)),
                ('description', models.CharField(max_length=250)),
                ('event_attendance', models.ManyToManyField(to='api.Attendance')),
                ('org', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_org_owner', to='api.org', verbose_name='Event Owner')),
            ],
        ),
        migrations.CreateModel(
            name='CurrentUserPlan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_started', models.DateField()),
                ('expiration_date', models.DateField()),
                ('canceled', models.BooleanField(default=False)),
                ('ended', models.BooleanField(default=False)),
                ('date_canceled', models.DateField()),
                ('renew_date', models.DateField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='plan_owner', to=settings.AUTH_USER_MODEL, verbose_name='Current User Plan')),
                ('payment_plan', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='plan_choosed', to='api.paymentplans', verbose_name='Payment Plan Selected')),
            ],
        ),
        migrations.CreateModel(
            name='Code',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(default=uuid.uuid4, max_length=50, unique=True, verbose_name='User Code')),
                ('revoked', models.BooleanField(default=False)),
                ('expired', models.BooleanField(default=False)),
                ('blocked', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_code', to=settings.AUTH_USER_MODEL, verbose_name='User Unique Code')),
            ],
        ),
        migrations.AddField(
            model_name='myuser',
            name='badges',
            field=models.ManyToManyField(to='api.Badges', verbose_name='User Badges'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='myuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
